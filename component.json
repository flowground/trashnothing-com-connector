{
    "title": "trash nothing!",
    "description": "This is the REST API for [trashnothing.com](https://trashnothing.com).\n\nTo learn more about the API or to register your app for use with the API\nvisit the [trash nothing! Developer page](https://trashnothing.com/developer).\n\nNOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time)\nand are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53).\n",
    "docsUrl": "",
    "url": "https://api.apis.guru/v2/specs/trashnothing.com/1.0.0/swagger.json",
    "envVars": {
        "OAUTH_CLIENT_ID": {
            "description": "OAuth Client ID"
        },
        "OAUTH_CLIENT_SECRET": {
            "description": "OAuth Client Secret"
        }
    },
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://trashnothing.com/api/v1.0",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "api_key": {
                "label": "api_key (api_key)",
                "viewClass": "TextFieldView",
                "note": "Provides access to specific public API endpoints which don't require user authorization. <br /><br /> The API currently allows api key access to list, search and retrieve posts (for public posts and posts on open archive groups) and to list, search and retrieve groups. <br /><br /> NOTE: Some API endpoints behave differently when requests are made using api keys instead of oauth (because api key requests have no user associated with them).  Check the documentation for each endpoint for a description of the differences.\n"
            },
            "oauth2_code": {
                "label": "This OAuth2 flow is designed for server side apps and is not enabled by default for new apps. If you would like to use this flow for your app, contact us through the [trash nothing! Developer page](https://trashnothing.com/developer).\n",
                "viewClass": "OAuthFieldView"
            },
            "oauth2_implicit": {
                "label": "This is the default OAuth2 flow for new apps.\n",
                "viewClass": "OAuthFieldView"
            }
        },
        "oauth2": {
            "client_id": "{{OAUTH_CLIENT_ID}}",
            "client_secret": "{{OAUTH_CLIENT_SECRET}}",
            "auth_uri": "https://trashnothing.com/oauth2/authorize"
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "send_feedback": {
            "main": "./lib/actions/send_feedback.js",
            "title": "Send feedback",
            "description": "Allows users to send feedback about the trashnothing.com site or apps.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/send_feedback.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "search_groups": {
            "main": "./lib/actions/search_groups.js",
            "title": "Search groups",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/search_groups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_groups_by_ids": {
            "main": "./lib/actions/get_groups_by_ids.js",
            "title": "Retrieve multiple groups",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_groups_by_ids.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "join_groups": {
            "main": "./lib/actions/join_groups.js",
            "title": "Join groups",
            "description": "Request membership to one or more groups. <br /><br /> NOTE: Any group with a has_questions field set to true will also require answers to the groups' new member questionnaire to be submitted.  Groups waiting for answers will have their membership field set to 'pending-questions'.  And the questionnaire that needs to be answered can be found in the membership.questionnaire field of the group after a subscribe request is made to that group.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/join_groups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_group": {
            "main": "./lib/actions/get_group.js",
            "title": "Retrieve a group",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_group.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "submit_answers": {
            "main": "./lib/actions/submit_answers.js",
            "title": "Submit group answers",
            "description": "Submits answers to a groups' membership questionnaire. <br /><br /> The request body should be a JSON object mapping each question from the group membership.questionnaire.questions field to an answer (eg. {\"Where do you live?\": \"New York City\"} ). All questions are required so no null or empty string answers are allowed.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/submit_answers.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "contact_moderators": {
            "main": "./lib/actions/contact_moderators.js",
            "title": "Contact group moderators",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/contact_moderators.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "leave_group": {
            "main": "./lib/actions/leave_group.js",
            "title": "Leave a group",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/leave_group.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "upload_photo": {
            "main": "./lib/actions/upload_photo.js",
            "title": "Create a photo",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/upload_photo.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "delete_photo": {
            "main": "./lib/actions/delete_photo.js",
            "title": "Delete a photo",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/delete_photo.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_photo_album": {
            "main": "./lib/actions/get_photo_album.js",
            "title": "Retrieve a photo album",
            "description": "Every post with photos has a photo album associated with the post.   The photo album for a post can be retrieved by passing the photo_id of any photo that is attached to a post. This makes it easier for users edit the photos attached to their post when they are reposting.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_photo_album.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "rotate_photo": {
            "main": "./lib/actions/rotate_photo.js",
            "title": "Rotate a photo",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/rotate_photo.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_posts": {
            "main": "./lib/actions/get_posts.js",
            "title": "List posts",
            "description": "NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users' location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users' location preferences.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_posts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "submit_post": {
            "main": "./lib/actions/submit_post.js",
            "title": "Submit a post",
            "description": "Submits a new post. <br /><br /> NOTE: An alternate way to submit posts that does quicker client side validation is to use the script served by the API at the /posts/client.js endpoint (see the description of the /posts/client.js endpoint for usage instructions).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/submit_post.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_post_client_javascript": {
            "main": "./lib/actions/get_post_client_javascript.js",
            "title": "Retrieve client.js",
            "description": "Defines javascript functions that can be used to validate and submit posts.\n\nThe advantage of using these functions versus using the post submission endpoint directly is that\nsome of the post validation checks can be done on the client side which will be faster.\n\nNOTE: If used, this javascript file MUST be loaded dynamically for each user because the contents\nof the file are generated dynamically based on the current user.  The file may be cached on a per\nuser basis based on the HTTP cache headers that are returned when the file is requested (currently\nthe cache headers specify that the file should expire after one day).\n\n\nThe following functions are available:\n\n---\n\n**window.TN.check_crossposting_restrictions(group_ids)**\n\nChecks for crossposting restrictions when the user selects more than one group to post to.\n\nParameters:\n- **group_ids** is an array of group IDs\n\nReturns an object with three properties {allowed, restricted, restrictions}.\n\n- **allowed** is an array of the group IDs from group_ids that can be crossposted to\n\n- **restricted** is an array of the group IDs from group_ids that can't be crossposted to\n\n- **restrictions** is an object mapping group IDs that have crossposting restrictions to arrays of group IDs that are restricted.\n  It is useful for pinpointing why a group ID shows up in the restricted array so that users can be provided feedback\n  about the reason for the crossposting restriction (eg. a message like 'group A doesn't allow crossposting to group B').\n\nFor example, given group_ids = [1, 2, 3, 4] and assuming group 1 doesn't allow posting to group 3 and group 2 doesn't allow\nposting to group 1, the returned object will be:\n\n{allowed: [4], restricted: [1, 2, 3], restrictions: {1: [3], 2: [1]}}\n\n\n---\n\n**window.TN.submit_post(args, session, preferences, callback)**\n\nSubmits a new post and performs validation checks on the post before it is accepted for submission.\n\nParameters:\n\n- **args** is an object containing data about the post being submitted and must include\n  the following properties:\n\n  - type: The type of post.  One of: offer, wanted\n  - title: A short description of the item(s).\n  - location: A short location description.\n\n  The following properties are optional:\n\n  - content: A longer description of the item(s).\n  - group_ids: An array of group IDs to submit the post to (if any).\n  - fair_offer: If set to 1, the post will be posted with the Fair Offer Policy (only valid for offer posts - see https://trashnothing.com/fair_offer_policy ).\n  - upload_key: The key used to upload any photos that should be attached to this post.\n  - latitude\n  - longitude\n\n- **session** is a temporary object that is used by submit_post to store data about the submission\n  process for a single post.  The first time submit_post is called with a post, session should\n  be a new empty object (eg. {}).  The session object should be persisted until that post\n  is successfully submitted and then it can be discarded so that the next post will start\n  over with a new empty session object.  \n\n- **preferences** is a permanent object that the client persists and modifies based on warnings returned\n  by the post submission process and user input.  Some post warnings passed to the callback object\n  have a preference_key string property so that users can opt out of those warnings in the future.\n  To save this opt-out preference, set the property indicated by the preference_key in the preferences\n  object (eg. preferences[preference_key] = 1).  The preferences object is only read by submit_post and\n  never modified - it is up to the client to initialize, modify and persist the preferences object.\n\n- **callback** is a function used to return the result of the post submission. It is called and passed\n  one argument - an object with five properties {result, message, preference_key, identifier, session}.\n  The result property is a string that is one of: success, error, warning.  The identifier property is\n  set for errors and warnings and will contain a string that represents the type of error or warning that\n  occurred.\n\n  A success result indicates that the post was submitted successfully. Note that posts may not\n  appear instantly after submission because the moderators of many groups may have additional\n  automatic or manual review processes in place that can delay the publishing of a post.\n  \n  An error result indicates that there is an error with the post to show the user and the message property\n  will contain text describing the error.\n\n  A warning result indicates that there is a warning about the post to show the user and the\n  message property will contain a string describing the warning.  A warning result doesn't prevent a post from\n  being submitted, to continue the submission process after a warning result, just re-submit the post\n  (with the updated session object) to temporarily override that specific warning.\n\n  Certain types of warnings can be opted out of.  These warnings will set preference_key to a string that can be \n  set in the preferences object by the client to opt out of that type of warning in the future (see the description\n  of the preferences parameter for more details).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_post_client_javascript.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_posts_by_ids": {
            "main": "./lib/actions/get_posts_by_ids.js",
            "title": "Retrieve multiple posts",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_posts_by_ids.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "search_posts": {
            "main": "./lib/actions/search_posts.js",
            "title": "Search posts",
            "description": "Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/search_posts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_post": {
            "main": "./lib/actions/get_post.js",
            "title": "Retrieve a post",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_post.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_post_and_related_data": {
            "main": "./lib/actions/get_post_and_related_data.js",
            "title": "Retrieve post display data",
            "description": "Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_post_and_related_data.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "flag_post": {
            "main": "./lib/actions/flag_post.js",
            "title": "Flag a post",
            "description": "Flags a post to be reviewed by the moderators.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/flag_post.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "geolocate_post": {
            "main": "./lib/actions/geolocate_post.js",
            "title": "Map a post",
            "description": "Map a post to a specific location when the post is missing a location or has an incorrect location.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/geolocate_post.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "reply_to_post": {
            "main": "./lib/actions/reply_to_post.js",
            "title": "Reply to a post",
            "description": "Send a reply to a post from the current user to the post author.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/reply_to_post.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "satisfy_post": {
            "main": "./lib/actions/satisfy_post.js",
            "title": "Satisfy a post",
            "description": "Mark an offer or wanted post by the current user as satisfied (eg. an offer has been taken or a wanted has been received).",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/satisfy_post.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_post_share_content": {
            "main": "./lib/actions/get_post_share_content.js",
            "title": "Retrieve post share content",
            "description": "Retrieve text and html content useful for sharing a post by email.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_post_share_content.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "share_post": {
            "main": "./lib/actions/share_post.js",
            "title": "Share a post",
            "description": "Forwards a copy of the post to the current user so that they can forward it to friends.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/share_post.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_current_user": {
            "main": "./lib/actions/get_current_user.js",
            "title": "Retrieve current user",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_current_user.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "update_current_user": {
            "main": "./lib/actions/update_current_user.js",
            "title": "Update current user",
            "description": "Update the current user.  All fields are optional so requests can update just one or multiple user properties at a time.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/update_current_user.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_alerts": {
            "main": "./lib/actions/get_alerts.js",
            "title": "List current users' email alerts",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_alerts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "create_alert": {
            "main": "./lib/actions/create_alert.js",
            "title": "Create an email alert",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/create_alert.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "delete_alert": {
            "main": "./lib/actions/delete_alert.js",
            "title": "Delete an email alert",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/delete_alert.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "change_email": {
            "main": "./lib/actions/change_email.js",
            "title": "Change email address",
            "description": "Change the users' current email address.  A verification link will be emailed to the new email address to verify that the email account belongs to the user.  The email change will not take effect until the user clicks the link in the verification email.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/change_email.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "set_email_not_bouncing": {
            "main": "./lib/actions/set_email_not_bouncing.js",
            "title": "Set users' email address as not bouncing",
            "description": "Resets an email address bouncing state to false.  The users' email address may be automatically marked as bouncing again if further emails sent to it are bounced.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/set_email_not_bouncing.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_current_user_groups": {
            "main": "./lib/actions/get_current_user_groups.js",
            "title": "List current users' groups",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_current_user_groups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "update_location": {
            "main": "./lib/actions/update_location.js",
            "title": "Update location",
            "description": "Update the current users' location. The location is used to determine which posts are shown to the user (both public posts and group posts).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/update_location.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_user_group_notices": {
            "main": "./lib/actions/get_user_group_notices.js",
            "title": "List current users' group notices",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_user_group_notices.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_current_user_posts": {
            "main": "./lib/actions/get_current_user_posts.js",
            "title": "List current users' posts",
            "description": "NOTE: In order to make it easier to see all a users&#39; posts, the current users&#39; location preferences are not applied when listing or searching posts from a single user.  If location based filtering of the posts is needed, the latitude, longitude and radius parameters may be used.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_current_user_posts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "search_current_user_posts": {
            "main": "./lib/actions/search_current_user_posts.js",
            "title": "Search current users' posts",
            "description": "Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/search_current_user_posts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_profile_images": {
            "main": "./lib/actions/get_profile_images.js",
            "title": "List current users' profile images",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_profile_images.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "resend_account_verification_email": {
            "main": "./lib/actions/resend_account_verification_email.js",
            "title": "Resend account verification email",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/resend_account_verification_email.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "send_password_reset_email": {
            "main": "./lib/actions/send_password_reset_email.js",
            "title": "Send password reset email",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/send_password_reset_email.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "report_user": {
            "main": "./lib/actions/report_user.js",
            "title": "Report a user",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/report_user.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_user": {
            "main": "./lib/actions/get_user.js",
            "title": "Retrieve a user",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_user.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_user_posts": {
            "main": "./lib/actions/get_user_posts.js",
            "title": "List posts by a user",
            "description": "NOTE: In order to make it easier to see all a users&#39; posts, the current users&#39; location preferences are not applied when listing or searching posts from a single user.  If location based filtering of the posts is needed, the latitude, longitude and radius parameters may be used.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_user_posts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "search_user_posts": {
            "main": "./lib/actions/search_user_posts.js",
            "title": "Search posts by a user",
            "description": "Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/search_user_posts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_profile_image_file": {
            "main": "./lib/actions/get_profile_image_file.js",
            "title": "Retrieve a users' profile image",
            "description": "This is designed to be used as the src attribute of an HTML &lt;img&gt; tag to show the profile image of the given user.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_profile_image_file.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}